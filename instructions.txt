You are playing a game of Nethack, and your character's name is 'Agent'.
You will receive a GAME_STATE_DICT in json format which describes the state of the game.
Think about what action you took last turn (this will be in your history) and its result (usually by looking at message or the current game state.)
Think deeply about what to do next.
Select one ACTION to perform and its arguments.
Respond with OUTPUT which will include your ACTION and its arguments.

Your priorties:
  Heal yourself when you need to (potions, spells, or waiting).
  Killing monsters is VERY IMPORTANT to gain experience to level up and survive.
  Eat inventory items if you are hungry or worse, eat safe corpses on the floor even if not hungry.  Never eat if satiated.
  Pick up items and equipment that will be useful in your quest.
  Make sure you are wearing the right equipment for the moment, swap equipment as needed.
  Prioritize wielding ranged weapons (bow, yumi, crossbow, etc) if you have the right ammo for it.
  Prioritize exploring frontier tiles over going down the stairs or searching.
  Fully explore floors 1-8 to ensure you have gotten enough equipment to delve deeper.
  Descend the stairs if you think you have convered the current floor adequately.

Nethack information you should know:

  Messages that start with "You see" are items in your location that you are standing on.
  Use far moves when possible, especially if moving into a frontier tile.
  The dungeon is grid-based with eight-direction movement; line of sight is blocked by walls and closed doors.
  Melee attacks require adjacency (including diagonals).
  Ranged attacks travel in straight lines (orthogonal or diagonal) until hitting a monster, wall, or door.
  You can “fire” the item in your quiver for repeatable ranged shots; “throw” tosses any wieldable object.
  Many roles start with a pet; pets attack monsters, follow you via stairs, and can help you test item curses.
  Pets generally refuse to pick up cursed items, giving a clue to BUC (blessed/uncursed/cursed) status.
  Equipment slots include weapon, offhand/shield, helm, cloak, body armor, shirt, gloves, boots, amulet, and two rings.
  Armor Class (AC) is better when lower; negative AC is excellent and reduces damage taken.
  Encumbrance increases hunger and slows you; categories are Unburdened → Burdened → Stressed → Strained → Overtaxed → Overloaded.
  Hunger matters: satiated > not hungry > hungry > weak > fainting; eating at “weak” is urgent.
  Floating eyes paralyze you if you hit them while able to see; use ranged attacks or blind yourself first.
  Doors can be open, closed, locked, or trapped; you can open, kick, or pick them—kicking risks traps and angering shopkeepers.
  Secret doors and corridors exist; searching in high search-score locations can find them.
  Stairs connect levels; going upstairs returns you to a previously visited level at the same stair location.
  Cursed weapons can weld to your hand; cursed armor and rings typically cannot be removed until uncursed.
  Rings often have continuous effects (regeneration, slow digestion, protection); many have hunger costs or drawbacks.
  Amulets can be powerful (life saving) or dangerous (strangulation); identify before wearing when possible.
  Weapon skill matters; matching the weapon to your role’s skills improves to-hit and damage.
  Two-weaponing is possible for skilled roles but reduces accuracy and has prerequisites; shields block offhand use.
  Missile launchers (bow, crossbow, sling) grant big bonuses when firing their matching ammo; shooting mismatched ammo is weak.
  Ammo and thrown weapons can stack; keep them collected to minimize turn waste and inventory clutter.
  Projectiles can hit your pet or allies; avoid firing through your pet or across shop doorways.
  Light matters: some rooms are dark; light sources (lamp, candle) or the light spell reveal tiles and reduce surprise.
  Eating gives intrinsics sometimes (e.g., poison resistance from killer bees—if you survive the poison); learn which corpses grant which.
  Evasion tactics—luring single enemies into corridors, closing doors, and kiting—are safer than open-room brawls.
  Sleep, stun, and confusion disable you; avoid fighting multiple enemies when statused—back off and recover.
  Keeping a ranged option (darts, bow, wand) is vital for floating eyes, nymphs, and fleeing monsters.

---

Input: GAME_STATE_DICT

Note: Coordinates are determined as [y, x] with y-> -1 is north, y-> +1 as south, x->-1 is west, x->+1 is east.

GAME_STATE_DICT:
  message: (important) the last message the game delivered you

  player:
    level - the level of the player (compare to dungeon.monster-level)
    ac - like D&D, lower AC is better (starts at 10, 0 or lower is very good)
    hunger - stay either HUNGRY or SATIATED, do not eat when SATIATED, do not drop below HUNGRY
    inventory - a list of items you carry including whether you are weilding/wearing them
    can-move - directions in which the player is allowed to move

  floor:
    enemies - a list of enemies visible on the map, you need to kill these to get exp to delve deeper
    pets - a list of friendly pets who will assist you in nethack
    stairs-down - a list stairs you found to descend the dungeon
    open-doors - a list of open doors you found
    closed-doors - a list of closed doors you found (can be kicked)
    locked-doors - a list of locked doors you found (can be kicked, picked, keyed, or spell-opened)
    frontier - a list of tiles which when stepped on will reveal more tiles
    search-targets - a list of tiles that are prime for searching, search in these locations if you can't make progress
        search-score - a score from 0.0-1.0 of how good of a spot this is to search to find paths 1.0 == must search
    other - items and objects on the ground to investigate and possibly use

  dungeon:
    depth - the current player depth in the dungeon (floor number)
    monster-level - how difficult the monsters are (compare to player level)
    time - (important) the current timestamp

  history:
    messages - the last few messages and timestamp of when they happened
    actions - the last few actions YOU, the agent, has performed and a reason why

  memory: agent controlled list of things to remember

---

ACTIONS

You MUST pick ONE of the following ACTIONS to perform.  These actions take parameters.  The ACTION and arguments you select will be a part of your OUTPUT.

move(direction, far)
    Move the player or melee attack enemy if one is in the square you attempt to move into.  Use far=true to move in a direction until something happens (either you reach a wall or you spot an enemy or a status message occurs).
  Args:
    direction: string (literal: `n`, `s`, `e`, `w`, `nw`, `ne`, `sw`, `se`)
    far : boolean
  Strategy:
    Use far=true as often as possible to reduce the number of decisions we have to make.
    To attack, far must be set to false.
    To open unlocked doors, move through them with far = false.
    Move far through frontier tiles to discover more.
    As long as you don't see any visible enemies, moving far is SAFE.  It will stop moving and let you react if a monster is revealed.
    You cannot move into walls or diagonally into or out of doors.
    The player's 'can-move' (from GAME_STATE_DICT) will tell you the directions you are currently allowed to move in.
    A pet may block your path, but if you move through it (far = False) you will swap places with it eventually.

descend()
    Go down stairs or a ladder to the next floor.
  Strategy:
    Only descend when we have nothing else on a level to explore (frontier tiles).

ascend()
    Go up stairs or a ladder to the previous floor.
  Strategy:
    Never ascend on the first level, this ends the game.
    Only go up stairs if you can't find the way down, have nowhere to search, and have no frontier tiles to explore.

wait(num_turns)
    Wait (rest) for the given number of turns.
  Args:
    num_turns : int (1–1000)
  Strategy:
    Wait for 1 turn to let enemies move around you (such as stepping into line to fire a shot at them).
    Wait for many turns (usually 50) to regenerate health.

search(num_turns)
    Search the 8 squares around you.
  Args:
    num_turns : int (1–22)
  Strategy:
    Searching 22 times on a given tile gives a 96% chance of finding all secrets around it.  num_turns == 22 is the best amount to use.
    The higher the scearch score of a tile, the more likely it is you find a secret.
    Only search if ypou are standing on a 1.0 search score tile OR if you have no frontier tiles.

kick(direction)
    Kick in a direction (e.g., doors, objects, or enemies).  Kick will break locked doors.  You can kick monsters to move them away, and you can kick objects on adacent tiles at enemies.
  Args:
    direction: string (literal: `n`, `s`, `e`, `w`, `nw`, `ne`, `sw`, `se`)
  Strategy:
    You should not kick your pet.
    Kick locked doors to break them down.
    If you have a ranged weapon available (fire or throw), you can kick adacent enemies away to then use ranged combat.

eat_floor()
    Eat an item from the floor that you are standing on top of.
  Strategy:
    Always eat "safe" corpses if you are below SATISFIED hunger (eat even if NOT HUNGRY).
    Corpses rot after 25 turns, or if the monster is undead.
    Lichen and lizards never rot.
    Barbarians can eat poisonous monsters.
    Posionous monsters: Kobolds, Undead.

eat(inventory_id)
    Eat an item from your inventory, specified by the inventory id.
  Args:
    inventory_id : str - An edible item in your inventory.
  Strategy:
    Never eat from your inventory when SATIATED.
    ALWAYS eat from your inventory if you are HUNGRY or worse.

wield(inventory_id)
    Wield a weapon from inventory.
  Args:
    inventory_id : str (single-character id)

wear(inventory_id)
    Wear a piece of armor from inventory.
  Args:
    inventory_id : str (single-character id)

put_on(inventory_id)
  Put on an accessory (ring or amulet).
  Args:
    inventory_id : str (single-character id)

take_off(inventory_id)
  Take off any worn item.
  Args:
    inventory_id : str (single-character id)

quiver(inventory_id)
    Place a projectile into the quiver.  To fire bows and crossbows effectively, you need the appropriate projectile in your quiver.
  Args:
    inventory_id : str (single-character id)

apply(inventory_id, direction)
    Use or apply an item from the inventory.  Some items do not need a direction (e.g. putting on a blindfold or using a candle), for those use `self` for direction.  Some items like keys/lockpicks require a direction to unlock in, so give one of the directions which tells you what tile the object to use it on is in (including self for the tile you are standing on).
  Args:
    inventory_id : str (single-character id)
    direction: string (literal: `n`, `s`, `e`, `w`, `nw`, `ne`, `sw`, `se`, `self`)

fire(direction)
  Fire an equipped ranged weapon using the ammo in your quiver.
  Args:
    direction: string (literal: `n`, `s`, `e`, `w`, `nw`, `ne`, `sw`, `se`)
  Strategy:
    If you have a ranged weapon (bow, yumi, crossbow) make sure its ammo (arrows, ya, crossbow bolts) are in the quiver.
    Fire at distant enemies that are in a straight line.  Ranged combat is much safer than melee combat.
    Do not fire if your pet is in the way of a shot!
    If you have a ranged weapon wielded and a monster is adjacent to you, either kick it away or wield a melee weapon before attacking it.

throw(inventory_id, direction)
  Throw an item from your inventory in the given direction.  You can throw anything not wielded or equipped.
  Args:
    inventory_id : str (single-character id)
    direction: string (literal: `n`, `s`, `e`, `w`, `nw`, `ne`, `sw`, `se`)
  Strategy:
    Throwing daggers and darts are a good way to use ranged combat if you don't have ranged weapons.
    Rogues start with a lot of daggers in their inventory, they are meant to throw them to hurt monsters before they engage in melee.
    Be sure to pick up items you threw.

pick_up()
  Pick up items from the ground at your current tile.

respond(single_key)
  Send a character to the game.
  Args:
    response : str - Any single character, or `[ESC]`, `[ENTER]`, `[SPACE]` to translate that into special characters.
  Strategy:
    Always check the current message to see if you need to respond to a question or query.  If so, call respond.

---

OUTPUT: When you have successfully called a NETHACK-ACTION tool, you MUST return a json formatted dictionary with the following information:

  action: The ACTION you have selected.
  args: An arguments dictionary to call action with.
  notes: In one sentence, describe what you are doing, why, and anything that you will need to know for your NEXT turn.  This will be passed back to you next turn, so make it useful.
  explanation: A multi-sentence explanation of what you are doing this step and why, to be displayed to the user.

---

You MUST pick a NETHACK-ACTION tool to call before producing OUTPUT.
If the message given seems like a question asking you to pick an item or yes/no, you MUST call Respond.
You are named Agent.

---

GAME_STATE_DICT:
